<?xml version="1.0" encoding="UTF-8"?>

<!--
    This file defines the menu items in the gear icon menu in the
    Parameters pane.

    Files named the same (ie. PARMmenu.xml) can exist in $HOME/houdiniX.Y/
    directory and will supplement the original definitions found in
    $HFS/houdini/ (aka $HH).

    The format in this file is similar to the format in $HH/MainMenuMaster
    except that it uses the <menuDocument> and <menu> tags instead of 
    <mainMenu> and <menuBar>. See the comments in that file for more advanced
    customization abilities.
    
    Another difference here is that most menu items in this file have no labels
    because they are dynamically created by Houdini. If labels are supplied to
    the items which currently have no labels in this file, they will be
    ignored.

    Note that the id's correspond to their hotkeys with the h.pane.parms.
    prefix (where available). For example, the item with id,
    "revert_to_prev_val", refers to the action in the hotkeys manager as
    "h.pane.parms.revert_to_prev_val".

    Also note that you can specify which context a particular menu item shows
    up in. To do this, add a context expression property.  For example, to make
    the menu item appear only for translate parameters you can do:
	<context>
	    <expression>kwargs["parms"][0].name() in ("tx", "ty", "tz")</expression>
	</context>

    For context expressions and menu scripts, a 'kwargs' python dictionary is
    provided with the following values:
	'node'	    :	The hou.Node object that the menu was opened for.
-->

<menuDocument>
    <!-- menuDocument can only contain 1 menu element, whose id is 
         implicitly "root_menu"
      -->
    <menu>
	<actionItem id="edit_spare_parms">
	    <label>Edit Parameter Interface...</label>
	</actionItem>

	<!-- This was an experimental workflow that we tried out in H16.5 beta. -->
<!--
	<actionItem id="edit_optype_parms">
	    <labelExpression><![CDATA[
optype_name = kwargs["node"].type().name()
label = "Edit Parameter Interface for '%s' operator type..." % optype_name
return label
]]></labelExpression>
	</actionItem>
-->
	<actionItem id="edit_render_parms">
	    <label>Edit Rendering Parameters...</label>
	</actionItem>
	<actionItem id="edit_delete_script">
	    <label>Edit Deletion Script...</label>
	</actionItem>
	<actionItem id="edit_comments">
	    <label>Edit Comments...</label>
	</actionItem>

	<separatorItem/>

	<actionItem id="revert_spare_parm_layout">
	    <label>Revert Parameter Interface</label>
	</actionItem>
	<actionItem id="delete_spare_parms">
	    <label>Delete All Spare Parameters</label>
	</actionItem>
	<actionItem id="add_spare_input">
	    <label>Add Spare Input</label>
	</actionItem>

	<separatorItem/>

	<subMenu id="add_visualizer_menu">
	    <label>Add Visualizer</label>
	    <context>
		<expression>kwargs["node"].type().category().name() in ("Object", "Sop", "Dop", "Vop")</expression>
	    </context>
	    <menuStripDynamic id="add_visualizer_menu_strip">
		<value>add_visualizer_menu.val</value>
	    </menuStripDynamic>
	</subMenu>

	<actionItem id="show_visualizers">
	    <label>Attached Visualizers...</label>
	    <context>
		<expression>kwargs["node"].type().category().name() in ("Object", "Sop", "Dop", "Vop")</expression>
	    </context>
	</actionItem>

	<separatorItem>
	    <context>
		<expression>kwargs["node"].type().category().name() in ("Object", "Sop", "Dop", "Vop")</expression>
	    </context>
	</separatorItem>

	<menuStripDynamic id="preset_control_menu_strip">
	    <value>preset_control_menu.val</value>
	</menuStripDynamic>

	<separatorItem/>

	<menuStripDynamic id="preset_menu_strip">
	    <value>preset_menu.val</value>
	</menuStripDynamic>
    </menu>
</menuDocument>
