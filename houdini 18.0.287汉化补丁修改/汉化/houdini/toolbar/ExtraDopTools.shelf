<?xml version="1.0" encoding="ISO-8859-1"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="dynamics_whitewater" label="纯净水" icon="SHELF_whitewater">
    <helpURL>tool:whitewater</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Fluids</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopparticlefluidtoolutils

dopparticlefluidtoolutils.createWhitewater(kwargs)]]></script>
  </tool>


  <tool name="dynamics_flipmist" label="雾化" icon="SHELF_flipmist">
    <helpURL>tool:flipmist</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Fluids</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopparticlefluidtoolutils

dopparticlefluidtoolutils.createMist(kwargs)]]></script>
  </tool>

  <tool name="dynamics_sculptedparticlefluid" label="雕刻粒子流体" icon="SHELF_sculptedparticlefluid">
    <helpURL>tool:sculptedparticlefluid</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/sculptedparticlefluid</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Fluids</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopparticlefluidtoolutils

dopparticlefluidtoolutils.createSculptedFluid(kwargs)]]></script>
  </tool>

  <tool name="dynamics_crownsplashfluid" label="顶点飞溅粒子流体" icon="SHELF_crown_splash">
    <helpURL>tool:crownsplash</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/crownsplashfluid</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Fluids</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopparticlefluidtoolutils

dopparticlefluidtoolutils.createCrownSplash(kwargs)]]></script>
  </tool>

  <tool name="dynamics_dripparticlefluid" label="滴落粒子流体" icon="SHELF_drip">
    <helpURL>tool:dripparticlefluid</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/dripparticlefluid</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Fluids</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopparticlefluidtoolutils

dopparticlefluidtoolutils.createDripParticleFluid(kwargs)]]></script>
  </tool>

  <tool name="dynamics_makeactive" label="激活对象" icon="SHELF_rbd_activate">
    <helpURL>tool:activateobjects</helpURL>
    <script scriptType="python"><![CDATA[import doptoolutils

doptoolutils.selectedDopObjectsSetActiveState(kwargs, 1)]]></script>
  </tool>

  <tool name="dynamics_makepassive" label="停用对象" icon="SHELF_rbd_deactivate">
    <helpURL>tool:deactivateobjects</helpURL>
    <script scriptType="python"><![CDATA[import doptoolutils

doptoolutils.selectedDopObjectsSetActiveState(kwargs, 0)]]></script>
  </tool>

  <tool name="dynamics_removeobject" label="从模拟中移除对象" icon="SHELF_remove_from_simulation">
    <helpURL>tool:removeobjectsfromsimulation</helpURL>
    <script scriptType="python"><![CDATA[import doptoolutils

doptoolutils.selectedDopObjectsRemoveFromSimulation(kwargs)]]></script>
  </tool>

  <tool name="dynamics_newsimulation" label="新建模拟" icon="NETWORKS_dop">
    <helpURL>tool:newsimulation</helpURL>
    <script scriptType="python"><![CDATA[import doptoolutils

doptoolutils.createNewDopNetwork()]]></script>
  </tool>

  <tool name="dynamics_makesmoke" label="来自对象的烟雾" icon="SHELF_convert_to_smoke">
    <helpURL>tool:smokefromobject</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.convertSelectedToFluidtype(kwargs, "smoke")
]]></script>
  </tool>

  <tool name="dynamics_makefuel" label="来自对象的燃料" icon="SHELF_convert_to_fuel">
    <helpURL>tool:fuelfromobject</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.convertSelectedToFluidtype(kwargs, "fuel")
]]></script>
  </tool>

  <tool name="dynamics_burstintoflame" label="从对象燃烧" icon="SHELF_convert_to_fire">
    <helpURL>tool:burstintoflame</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.burstSelectedIntoFlame(kwargs)
]]></script>
  </tool>

  <tool name="pyro_mushroomcloud" label="蘑菇云" icon="SHELF_mushroomcloud">
    <helpURL>tool:pyro_mushroomcloud</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.mushroomCloud(kwargs)
]]></script>
  </tool>

  <tool name="pyro_explosion" label="爆炸" icon="SHELF_fireball">
    <helpURL>tool:pyro_explosion</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.explosion(kwargs)
]]></script>
  </tool>

  <tool name="pyro_fireball" label="火球" icon="SHELF_fireball">
    <helpURL>tool:pyro_fireball</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.fireball(kwargs)
]]></script>
  </tool>

  <tool name="pyro_billowysmoke" label="庞大的烟雾" icon="SHELF_smoke_heavy">
    <helpURL>tool:pyro_billowysmoke</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.billowySmoke(kwargs)
]]></script>
  </tool>

  <tool name="pyro_coloredsmoke" label="彩色烟雾" icon="SHELF_smoke_colored">
    <helpURL>tool:pyro_coloredsmoke</helpURL>
    <script scriptType="python"><![CDATA[
import doppyrotoolutils
doppyrotoolutils.coloredSmoke(kwargs)
]]></script>
  </tool>

  <tool name="pyro_makecolored" label="添加颜色" icon="SHELF_smoke_make_colored">
    <helpURL>tool:pyro_makecolored</helpURL>
    <script scriptType="python"><![CDATA[
import doppyrotoolutils
doppyrotoolutils.makeColored(kwargs)
]]></script>
  </tool>

  <tool name="pyro_wispy" label="烟丝" icon="SHELF_smoke_wispy">
    <helpURL>tool:pyro_wispysmoke</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.wispy(kwargs)
]]></script>
  </tool>

  <tool name="pyro_burn" label="火焰" icon="SHELF_fire">
    <helpURL>tool:pyro_burn</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.burn(kwargs,True)
]]></script>
  </tool>

  <tool name="pyro_candleflame" label="蜡烛" icon="SHELF_candle">
    <helpURL>tool:pyro_candle</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.candle(kwargs,False)
]]></script>
  </tool>

  <tool name="pyro_smokelessflame" label="无烟火" icon="SHELF_fire">
    <helpURL>tool:pyro_smokelessflame</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.burn(kwargs,False)
]]></script>
  </tool>

  <tool name="pyro_dryice" label="干冰" icon="SHELF_dry_ice">
    <helpURL>tool:pyro_dryice</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.dryice(kwargs)
]]></script>
  </tool>

  <tool name="pyro_volcano" label="火山" icon="SHELF_volcano_smoke">
    <helpURL>tool:pyro_volcano</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.volcano(kwargs)
]]></script>
  </tool>


  <tool name="pyro_smoketrail" label="尾部冒烟" icon="SHELF_contrail">
    <helpURL>tool:smoketrail</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.smokeTrail(kwargs)
]]></script>
  </tool>

  <tool name="pyro_clusteredsmoke" label="烟雾团" icon="SHELF_smokecluster">
    <helpURL>tool:smokecluster</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.billowySmoke(kwargs,True)
]]></script>
  </tool>

  <tool name="pyro_clusteredfire" label="火药堆" icon="SHELF_pyrocluster">
    <helpURL>tool:pyrocluster</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
import doppyrotoolutils
doppyrotoolutils.burn(kwargs,True,True)
]]></script>
  </tool>
 
  <tool name="spyro_firespread" label="传播火焰" icon="SHELF_spyro_firespread">
    <helpURL>tool:spyro_firespread</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools
dopsparsepyrotools.createSpreadingFire(kwargs)
]]></script>
  </tool>

  <tool name="spyro_gpusmoke" label="GPU 庞大的烟雾" icon="SHELF_smoke_heavy">
    <helpURL>tool:spyro_gpusmoke</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools
dopsparsepyrotools.createGPUBillowySmoke(kwargs)
]]></script>
  </tool>
  
  <tool name="spyro_billowysmoke" label="松散的庞大烟雾" icon="SHELF_smoke_heavy">
    <helpURL>tool:spyro_billowysmoke</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools
dopsparsepyrotools.createSparseBillowySmoke(kwargs)
]]></script>
  </tool>

  <tool name="spyro_fireball" label="松散的火球" icon="SHELF_fireball">
    <helpURL>tool:spyro_fireball</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools
dopsparsepyrotools.createSparseFireball(kwargs)
]]></script>
  </tool>

  <tool name="spyro_campfire" label="营火" icon="SHELF_fire">
    <helpURL>tool:spyro_campfire</helpURL>
    <script scriptType="python"><![CDATA[
import dopsparsepyrotools
dopsparsepyrotools.createSparseCampfire(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_paintfuel" label="绘制燃料" icon="SHELF_paint_fuel">
    <helpURL>tool:paintfuel</helpURL>
    <script scriptType="python"><![CDATA[
import soptoolutils
soptoolutils.chooseAndPaintObject(kwargs, 'fuel', {'attribdef':0, 'vismode':'blackbody'},
                "Select objects to paint fuel and press Enter to complete.")
]]></script>
  </tool>

  <tool name="dynamics_painttemp" label="绘制温度" icon="SHELF_paint_temperature">
    <helpURL>tool:painttemperature</helpURL>
    <script scriptType="python"><![CDATA[
import soptoolutils
soptoolutils.chooseAndPaintObject(kwargs, 'temperature', {'attribdef':0, 'vismode':'blackbody'},
                "Select objects to paint temperature and press Enter to complete.")
]]></script>
  </tool>

  <tool name="dynamics_fuelfromtexture" label="燃料样式的纹理" icon="SHELF_fuel_from_texture">
    <helpURL>operator:Sop/attribfrommap</helpURL>
    <script scriptType="python"><![CDATA[
import soptoolutils
soptoolutils.chooseAndApplyTexture(kwargs, 'fuel', {'attribdef':1},
                "Select (textured) object(s) to apply fuel fluid map on. Press Enter to complete.")
]]></script>
  </tool>


  <tool name="dynamics_temperaturefromtexture" label="温度样式的纹理" icon="SHELF_temperature_from_texture">
    <helpURL>operator:Sop/attribfrommap</helpURL>
    <script scriptType="python"><![CDATA[
import soptoolutils
soptoolutils.chooseAndApplyTexture(kwargs, 'temperature', {'attribdef':1},
                "Select (textured) object(s) to apply temperature fluid map on. Press Enter to complete.")
]]></script>
  </tool>


  <tool name="dynamics_makefluid" label="来自对象的液体" icon="SHELF_convert_to_fluid">
    <helpURL>tool:liquidfromobject</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.convertSelectedToFluidtype(kwargs, "fluid")
]]></script>
  </tool>

  <tool name="dynamics_makeparticlefluid" label="来自对象的 SPH 流体" icon="SHELF_convert_to_particlefluid">
    <helpURL>tool:particlefluidfromobject</helpURL>
    <script scriptType="python"><![CDATA[
import toolutils
import doptoolutils

objectnode = doptoolutils.genericDopConverterTool(toolutils.activePane(kwargs), 'particlefluidobject', 'particlefluidobject1', 'Select object to convert into an SPH Fluid.  Press Enter to accept selection.')
]]></script>
  </tool>

  <tool name="dynamics_makeparticlegrain" label="来自对象的粒子颗粒" icon="SHELF_convert_to_particlefluid">
    <helpURL>tool:particlegrainfromobject</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils

objectnode = doptoolutils.genericTool(kwargs, "particlefluidobject")
doptoolutils.convertToGrains(objectnode)
]]></script>
  </tool>

  <tool name="dynamics_poplocation" label="定位粒子发射器" icon="POP_location">
    <helpURL>tool:dynamics_poplocation</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
doppoptoolutils.createLocationEmitter(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_popfireworks" label="烟花" icon="POP_fireworks">
    <helpURL>tool:dynamics_popfireworks</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
doppoptoolutils.createFireworksEmitter(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_popsource" label="源粒子发射器" icon="POP_source">
    <helpURL>tool:dynamics_popsource</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createSourceEmitter(kwargs)
if node is not None:
    node.parm('initvel').set('add')
]]></script>
  </tool>

  <tool name="dynamics_popgrains" label="干沙" icon="SHELF_dry_sand">
    <helpURL>tool:drysand</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createSandSource(kwargs, style='point')
]]></script>
  </tool>

  <tool name="dynamics_sandbox" label="沙盒" icon="SHELF_sandbox">
    <helpURL>tool:sandbox</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createSandBox(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_popgrainswet" label="湿沙" icon="SHELF_wet_sand">
    <helpURL>tool:wetsand</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createSandSource(kwargs, style='pointwet')
]]></script>
  </tool>

  <tool name="dynamics_popgrainsolid" label="颗粒固体" icon="DOP_sandobject">
    <helpURL>tool:granularsolid</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createSandSource(kwargs, style='solid')
]]></script>
  </tool>

  <tool name="dynamics_popgrainsheet" label="颗粒层" icon="SHELF_sand_sheet">
    <helpURL>tool:granularsheet</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createSandSource(kwargs, style='sheet')
]]></script>
  </tool>

  <tool name="dynamics_popgrainstrand" label="颗粒碎裂" icon="SHELF_sand_strand">
    <helpURL>tool:granularstrand</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createSandSource(kwargs, style='strand')
]]></script>
  </tool>

  <tool name="dynamics_rbdgrains" label="RBD 谷物颗粒" icon="SHELF_rbd_grains">
    <helpURL>tool:rbdgrains</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doprbdtoolutils
doprbdtoolutils.createRBDGrains(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_popreplicate" label="重复粒子" icon="POP_split">
    <helpURL>tool:dynamics_popreplicate</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.applyModifier(kwargs, 'popreplicate')
if node is not None:
    # selgroup = node.parm('partgroup').evalAsString()
    # selgroup += ' ^stream_`chs("streamname")`'
    # node.parm('partgroup').set(selgroup)
    node.parm('initvel').set('add')
    node.parm('shape').set('point')
    node.parm('killorig').set(1)
]]></script>
  </tool>

  <tool name="dynamics_vellumcloth" label="尼龙布料" icon="SHELF_vellum_cloth">
    <helpURL>tool:vellumcloth</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createVellumSource(kwargs, style='cloth')
]]></script>
  </tool>

  <tool name="dynamics_vellumhair" label="尼龙毛发" icon="SHELF_vellum_hair">
    <helpURL>tool:vellumhair</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createVellumSource(kwargs, style='hair')
]]></script>
  </tool>

  <tool name="dynamics_vellumballoon" label="尼龙气球" icon="SHELF_vellum_balloon">
    <helpURL>tool:vellumballoon</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createVellumSource(kwargs, style='balloon')
]]></script>
  </tool>

  <tool name="dynamics_vellumsoftbody" label="尼龙支架软体" icon="SHELF_vellum_softbody_struts">
    <helpURL>tool:vellumsoftbody</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createVellumSource(kwargs, style='softbody')
]]></script>
  </tool>

  <tool name="dynamics_vellumtetsoftbody" label="尼龙四面体软体" icon="SHELF_vellum_softbody_tetrahedral">
    <helpURL>tool:vellumtetsoftbody</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createVellumSource(kwargs, style='tetsoftbody')
]]></script>
  </tool>

  <tool name="dynamics_vellumgrains" label="尼龙谷物颗粒" icon="SHELF_vellum_grains">
    <helpURL>tool:vellumgrains</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.createVellumSource(kwargs, style='grains')
]]></script>
  </tool>



  <tool name="dynamics_popaxisforce" label="坐标轴力粒子" icon="POP_orbit">
    <helpURL>tool:dynamics_popaxisforce</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.applyModifier(kwargs, 'popaxisforce')
]]></script>
  </tool>

  <tool name="dynamics_popcolor" label="颜色粒子" icon="POP_color">
    <helpURL>tool:dynamics_popcolor</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.applyModifier(kwargs, 'popcolor')
]]></script>
  </tool>

  <tool name="dynamics_popdrag" label="拖拉粒子" icon="POP_drag">
    <helpURL>tool:dynamics_popdrag</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.applyModifier(kwargs, 'popdrag')
]]></script>
  </tool>

  <tool name="dynamics_popfan" label="吹散粒子" icon="POP_fan">
    <helpURL>tool:dynamics_popfan</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.applyModifier(kwargs, 'popfan')
]]></script>
  </tool>

  <tool name="dynamics_popflock" label="集群粒子" icon="POP_follow">
    <helpURL>tool:dynamics_popflock</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.applyModifier(kwargs, 'popflock')
]]></script>
  </tool>

  <tool name="dynamics_popforce" label="力粒子" icon="POP_force">
    <helpURL>tool:dynamics_popforce</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.applyModifier(kwargs, 'popforce')
if node is not None:
    scale = hou.scaleFromMKS("m1s-2")
    node.parmTuple('force').set(hou.Vector3(0, -9.81*scale, 0))
]]></script>
  </tool>

  <tool name="dynamics_popwind" label="盘旋粒子" icon="POP_wind">
    <helpURL>tool:dynamics_popwind</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.applyModifier(kwargs, 'popwind')
if node is not None:
    scale = hou.scaleFromMKS("m1s-1")
    node.parmTuple('wind').set(hou.Vector3(1*scale, 0, 0))
]]></script>
  </tool>

  <tool name="dynamics_popinteract" label="影响粒子" icon="POP_interact">
    <helpURL>tool:dynamics_popinteract</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.applyModifier(kwargs, 'popinteract')
]]></script>
  </tool>

  <tool name="dynamics_popcollision" label="碰撞检测粒子" icon="POP_collision">
    <helpURL>tool:dynamics_popcollision</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
(node, geo) = doppoptoolutils.applyGeoModifier(kwargs, 'popcollisiondetect')
if node is not None:
    node.parm('soppath').set(geo.path())
]]></script>
  </tool>

  <tool name="dynamics_popattracttopoints" label="点牵引粒子" icon="SHELF_pointattract">
    <helpURL>tool:dynamics_popattract</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
(node, geo) = doppoptoolutils.applyGeoModifier(kwargs, 'popattract')
if node is not None:
    node.parm('attracttype').set('points')
    node.parm('soppath').set(geo.path())
    node.parm('matchmethod').set('point')
]]></script>
  </tool>

  <tool name="dynamics_popawaken" label="用几何体激发" icon="POP_awaken">
    <helpURL>tool:awakenbygeometry</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
(node, geo) = doppoptoolutils.applyGeoModifier(kwargs, 'popawaken', targetinput='pre')
if node is not None:
    node.parm('dovolumewakeup').set(True)
    displaysop = geo.displayNode()
    if displaysop is None:
	raise hou.Error("No geometry found in selected object.")
    convertsop = geo.createNode('vdbfrompolygons', 'convert_to_sdf')
    convertsop.setNextInput(displaysop)
    convertsop.moveToGoodPosition()
    dilatesop = geo.createNode('vdbreshapesdf', 'expand_sdf')
    dilatesop.setNextInput(convertsop)
    dilatesop.parm('useworldspaceunits').set(True)
    dilatesop.parm('voxeloffset').set(0.3)
    dilatesop.moveToGoodPosition()
    null = geo.createNode('null', 'ACTIVATE_SOURCE')
    null.setNextInput(dilatesop)
    null.moveToGoodPosition()

    node.parm('soppath').set(null.path())
]]></script>
  </tool>

  <tool name="dynamics_popautofreeze" label="自动睡眠粒子" icon="POP_sleep">
    <helpURL>tool:autosleep</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
node = doppoptoolutils.setupAutoFreeze(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_popattracttocurvepoint" label="曲线牵引粒子" icon="SHELF_curveattract">
    <helpURL>tool:dynamics_popattract</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
(node, geo) = doppoptoolutils.applyGeoModifier(kwargs, 'popattract',
                            "Select curves for Curve Attract Particles.  Press Enter to accept selection.")
if node is not None:
    node.parm('attracttype').set('surface')
    node.parm('soppath').set(geo.path())
    node.parm('uselocalprimuv').set(True)
    node.parm('primuvcode').set('goalprimuv.x = @age / @life;')
]]></script>
  </tool>

  <tool name="dynamics_popcurveforce" label="曲线力粒子" icon="DOP_vortexforce">
    <helpURL>tool:dynamics_popcurveforce</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
(node, geo) = doppoptoolutils.applyGeoModifier(kwargs, 'popcurveforce',
                            "Select curves for Curve Force Particles.  Press Enter to accept selection.")
if node is not None:
    node.parm('soppath').set(geo.path())
]]></script>
  </tool>

<tool name="dynamics_gascurveforce" label="气体曲线力" icon="DOP_gascurveforce">
    <helpURL>tool:dynamics_gascurveforce</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
import toolutils

activepane = toolutils.sceneViewer()

# select curve
geoselect = activepane.selectGeometry("Select the curve to follow. Press Enter to accept selection.")

if len(geoselect.nodes()) == 0:
    raise hou.Error("Must select a curve")
curve = geoselect.nodes()[0]

# select dyno obj
dynos = activepane.selectDynamics("Now, select the smoke object to act on")
if len(dynos) == 0:
    raise hou.Error("Must select a smoke object")
fluidobj = dynos[0]
dopnet = fluidobj.dopNetNode()
fluidnode = doptoolutils.getDopObjectCreator(fluidobj)

fluidtype = doptoolutils.nodeFluidType(fluidnode)

if (fluidtype != 'liquid' and
       fluidtype != 'pyro' and
       fluidtype != 'fire' and
       fluidtype != 'smoke' and
       fluidtype != 'uprespyro' and
       fluidtype != 'upressmoke'):
    raise hou.Error("Must select a smoke object")

solvernode = doptoolutils.nodeFluidSolverNode(fluidnode)

volumecurveforce = dopnet.createNode("gascurveforce")
if fluidnode.parm('divsize') is not None:
    volumecurveforce.parm('divsize').set(fluidnode.parm('divsize'))

mergenode = doptoolutils.findOrCreateNamedMerge(solvernode, 'vel')

mergenode.setNextInput(volumecurveforce)
volumecurveforce.moveToGoodPosition()

# add curve param
volumecurveforce.parm('soppath').set(curve.path())
]]></script>
  </tool>

  <tool name="dynamics_popvortexfilaments" label="涡流丝线" icon="DOP_popadvectbyfilaments">
    <helpURL>tool:dynamics_popvortexfilaments</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
doppoptoolutils.addVortexFilaments(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_popmetaballforce" label="弹球力粒子" icon="SOP_metaball">
    <helpURL>tool:dynamics_popmetaballforce</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
(node, geo) = doppoptoolutils.applyGeoModifier(kwargs, 'popmetaballforce',
                            "Select metaballs for Metaball Force Particles.  Press Enter to accept selection.")
if node is not None:
    node.parm('metaballpath').set(geo.path())

    # Verify we have force attributes!
    sop = geo
    if sop.type().category() == hou.objNodeTypeCategory():
	sop = sop.displayNode()
    if sop is not None and sop.type().category() == hou.sopNodeTypeCategory():
	geometry = sop.geometry()
	if geometry is not None:
	    if geometry.findPrimAttrib('fradial') is None and geometry.findPrimAttrib('dir') is None:
		# No proper force attributes, create the force SOP!
		forcenode = sop.parent().createNode('force')
		forcenode.parm('doradial').set(True)
		forcenode.setNextInput(sop)

		# Move flags.
		if sop.isDisplayFlagSet():
		    forcenode.setDisplayFlag(True)
		if sop.isRenderFlagSet():
		    forcenode.setRenderFlag(True)
		forcenode.moveToGoodPosition()

		# Wire up to the new node
		if sop == geo:
		    node.parm('metaballpath').set(forcenode.path())

]]></script>
  </tool>

  <tool name="dynamics_popinstance" label="实例几何附加到粒子" icon="POP_instance">
    <helpURL>tool:dynamics_popinstance</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
(node, geo) = doppoptoolutils.applyGeoModifier(kwargs, 'popinstance')
if node is not None:
    node.parm('instancepath').set(geo.path())
]]></script>
  </tool>


  <tool name="dynamics_popsprite" label="活泼粒子" icon="POP_sprite">
    <helpURL>tool:dynamics_popsprite</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doppoptoolutils
import dopsmoketoolutils
node = doppoptoolutils.applyModifier(kwargs, 'popsprite')

pobject = doppoptoolutils.findParticleSystem()
if pobject is not None and node is not None:
    ionodes = doptoolutils.getNodesImportingCreator(pobject)
    for ionode in ionodes:
        if ionode is not None:
            (material, built) = dopsmoketoolutils.findOrCreateMaterial('spritefog', 'sprite')
            if ionode.parent() is not None and ionode.parent().parm('shop_materialpath') is not None:
                ionode.parent().parm('shop_materialpath').set(material.path())
]]></script>
  </tool>

  <tool name="dynamics_makeflip" label="来自对象的 FLIP 流体" icon="SHELF_convert_to_fluid">
    <helpURL>tool:flipfluidfromobject</helpURL>
    <script scriptType="python"><![CDATA[
import toolutils
import doptoolutils
import dopparticlefluidtoolutils

objectnode = doptoolutils.genericDopConverterTool(toolutils.activePane(kwargs), 'flipfluidobject', 'flipfluidobject1', 'Select object to convert into a FLIP Fluid.  Press Enter to accept selection.')
dopparticlefluidtoolutils.convertToFLIP(objectnode)
]]></script>
  </tool>

  <tool name="dynamics_flipbox" label="FLIP 水槽" icon="SHELF_flip_tank">
    <helpURL>tool:fliptank</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.flipBox(kwargs)]]></script>
  </tool>

  <tool name="dynamics_wavetank" label="波浪水槽" icon="SHELF_wave_tank">
    <helpURL>tool:wavetank</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.waveTank(kwargs)]]></script>
  </tool>

  <tool name="dynamics_guidedoceanlayer" label="引导海洋层" icon="SHELF_guided_ocean_layer">
    <helpURL>tool:guidedoceanlayer</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.guidedOceanLayer(kwargs)]]></script>
  </tool>

  <tool name="dynamics_beachtank" label="沙滩水槽" icon="SHELF_beach_tank">
    <helpURL>tool:beachtank</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.beachTank(kwargs)]]></script>
  </tool>

  <tool name="dynamics_flattank" label="浅水槽" icon="SHELF_flat_tank">
    <helpURL>tool:flattank</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.flatTank(kwargs)]]></script>
  </tool>

  <tool name="dynamics_oceanflattank" label="海洋浅水罐" icon="SHELF_flat_tank">
    <helpURL>tool:oceanflattank</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.oceanFlatTank(kwargs)]]></script>
  </tool>

  <tool name="dynamics_makeviscous" label="做成粘性的" icon="SHELF_pour">
    <helpURL>tool:makeviscous</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.makeViscous(kwargs)]]></script>
  </tool>


  <tool name="dynamics_burnsource_surface" label="来自曲面的源" icon="SHELF_source_from_surface">
    <helpURL>tool:sourcefromsurface</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils

applyname = 'SOP_Source_VolumeSurface'
dopsmoketoolutils.selectedConvertToSourceSink(kwargs, applyname,
    objprompt="Select object to emit from.",
    fluidprompt="Select smoke object to emit into", autoconvert = False)]]></script>
  </tool>


  <tool name="dynamics_burnsource_points" label="来自点的源" icon="SHELF_source_from_points">
    <helpURL>tool:sourcefrompoints</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils

applyname = 'SOP_Source_VolumePoints'
dopsmoketoolutils.selectedConvertToSourceSink(kwargs, applyname,
    objprompt="Select object to emit from.",
    fluidprompt="Select smoke object to emit into", autoconvert = False)]]></script>
  </tool>

  <tool name="dynamics_burnsource_volumes" label="来自体积的源" icon="SHELF_source_from_volume">
    <helpURL>tool:sourcefromvolume</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils

applyname = 'SOP_Source_Volume'
dopsmoketoolutils.selectedConvertToSourceSink(kwargs, applyname,
    objprompt="Select object to emit from.",
    fluidprompt="Select smoke object to emit into", autoconvert = False)]]></script>
  </tool>


  <tool name="dynamics_makesink" label="让对象沉淀" icon="SHELF_fluid_sink">
    <helpURL>tool:sinkfromobjects</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils

applyname = 'SOP_Sink'
dopsmoketoolutils.selectedConvertToSourceSink(kwargs, applyname,
    objprompt="Select object to create sink from.",
    fluidprompt="Select smoke object to add sink to")]]></script>
  </tool>

  <tool name="dynamics_makepump" label="让对象做泵" icon="SHELF_fluid_pump">
    <helpURL>tool:pumpfromobjects</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils

applyname = 'SOP_Pump'
dopsmoketoolutils.selectedConvertToSourceSink(kwargs, applyname,
    objprompt="Select object to create pump from.",
    fluidprompt="Select smoke object add pump to")]]></script>
  </tool>

    <tool name="dynamics_makecollision" label="与对象碰撞" icon="SHELF_make_collision">
    <helpURL>tool:collidewithobjects</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils

applyname = 'SOP_Collision'
dopsmoketoolutils.selectedConvertToSourceSink(kwargs, applyname,
    objprompt="Select object to collide with.",
    fluidprompt="Select smoke object add collider to")]]></script>
  </tool>

      <tool name="dynamics_makeexpand" label="从对象展开" icon="SHELF_expand_from_objects">
    <helpURL>tool:expandfromobjects</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils

applyname = 'SOP_Expand'
dopsmoketoolutils.selectedConvertToSourceSink(kwargs, applyname,
    objprompt="Select object to push away from.",
    fluidprompt="Select smoke object to push")]]></script>
  </tool>

  <tool name="dynamics_resizecontainer" label="调整容器大小" icon="DOP_resizefluid">
    <helpURL>tool:resizefluid</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.resizeFluid(kwargs)]]></script>
  </tool>

  <tool name="dynamics_parentfluid" label="关系流体" icon="DOP_parentfluid">
    <helpURL>tool:parentfluid</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.parentFluid(kwargs)]]></script>
  </tool>

  <tool name="dynamics_smokebox" label="烟雾容器" icon="SHELF_box_smoke">
    <helpURL>tool:smokebox</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.dopEmptyFluidBox(kwargs, "smoke")]]></script>
  </tool>

<tool name="dynamics_instancesmokebox" label="烟雾实例容器" icon="SOP_copy">
    <helpURL>tool:smokebox</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.dopEmptyFluidBox(kwargs, "smoke",None,True,True)]]></script>
  </tool>

  <tool name="dynamics_firebox" label="火焰面容器" icon="SHELF_box_flamefront">
    <helpURL>tool:firebox</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.dopEmptyFluidBox(kwargs, "dsdfire")]]></script>
  </tool>

  <tool name="dynamics_pyrobox" label="火药容器" icon="SHELF_box_fire">
    <helpURL>tool:pyrobox</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.dopEmptyFluidBox(kwargs, "pyro_build")
]]></script>
  </tool>

  <tool name="dynamics_instancepyrobox" label="火药实例容器" icon="SOP_copy">
    <helpURL>tool:pyrobox</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.dopEmptyFluidBox(kwargs, "pyro_build",None,True,True)
]]></script>
  </tool>

  <tool name="dynamics_fluidbox" label="液体容器" icon="SHELF_box_fluid">
    <helpURL>tool:liquidbox</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.dopEmptyFluidBox(kwargs, "fluid")]]></script>
  </tool>

  <tool name="dynamics_initvel" label="装载速度" icon="SOP_volumevelocity">
    <helpURL>operator:Sop/volumevelocity</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.initVelocity(kwargs)]]></script>
  </tool>

  <tool name="dynamics_embedinfluid" label="嵌入进流体" icon="SHELF_move_with_fluid">
    <helpURL>tool:embedinfluid</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.embedInFluid(kwargs)]]></script>
  </tool>

  <tool name="dynamics_upres" label="向上再容纳" icon="DOP_gasupres">
    <helpURL>tool:upres</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.upresSelect(kwargs)]]></script>
  </tool>

  <tool name="dynamics_upressamenet" label="向上再容纳相同网格" icon="DOP_gasupres">
    <helpURL>tool:upres</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.upresSmokeSelectSameNet(kwargs)]]></script>
  </tool>

  <tool name="dynamics_distribute" label="分配" icon="SHELF_distribute_fluid_sim">
    <helpURL>tool:distribute</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.distributeSimulation(kwargs)]]></script>
  </tool>

  <tool name="dynamics_distribute_cloth" label="分配" icon="SHELF_distribute_fluid_sim">
    <helpURL>tool:distribute_cloth</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.distributeSimulation(kwargs)]]></script>
  </tool>

  <tool name="dynamics_distribute_container" label="分配容器" icon="SHELF_distribute_fluid_sim">
    <helpURL>tool:distribute_container</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
prompt = "Select container(s) to distibute. Press Enter to complete."
invalid_selection_method = "No container selected to distribute."
dopsmoketoolutils.distributeSimulation(kwargs, prompt, invalid_selection_method)]]></script>
  </tool>

  <tool name="dynamics_distribute_fluid" label="分配粒子流体" icon="SHELF_distribute_fluid_sim">
    <helpURL>tool:distribute_pfluid</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
prompt = "Select particle fluid(s) to distibute. Press Enter to complete."
invalid_selection_method = "No fluid selected to distribute."
dopsmoketoolutils.distributeSimulation(kwargs, prompt, invalid_selection_method)]]></script>
  </tool>

  <tool name="dynamics_distribute_wire" label="分配" icon="SHELF_distribute_fluid_sim">
    <helpURL>tool:distribute_wires</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.distributeSimulation(kwargs)]]></script>
  </tool>

  <tool name="dynamics_slicebyplane" label="切片" icon="DOP_sliceplane">
    <helpURL>tool:slice</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.sliceSimByPlane(kwargs, 'sliceplane')]]></script>
  </tool>

  <tool name="dynamics_slicealongline" label="沿线切片" icon="DOP_slicealongline">
    <helpURL>tool:slicealongline</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.sliceSimByPlane(kwargs, 'slicealongline')]]></script>
  </tool>

  <tool name="dynamics_addfield" label="添加域到流体" icon="SHELF_addfield">
    <helpURL>tool:addfield</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.addField(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_targetsmoke" label="牵引流体" icon="SHELF_attractfluid">
    <helpURL>tool:attractfluid</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.targetDrivenSmokeSelect(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_suctionfluid" label="吸引流体" icon="SHELF_suctionfluid">
    <helpURL>tool:suctionfluid</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.particleFluidSuctionSelect(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_popcondensation" label="凝结" icon="SHELF_condensation">
    <helpURL>tool:condensation</helpURL>
    <script scriptType="python"><![CDATA[
import dopparticlefluidtoolutils
dopparticlefluidtoolutils.createCondensationPOPFluid(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_seedvorticles" label="起始漩涡" icon="SHELF_seedvorticles">
    <helpURL>tool:seedvorticles</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import dopsmoketoolutils
dopsmoketoolutils.seedVorticles(kwargs)]]></script>
  </tool>

  <tool name="dynamics_particlefluidemitter" label="发射粒子流体" icon="DOP_particlefluidemitter">
    <helpURL>tool:emitparticlefluid</helpURL>
    <script scriptType="python"><![CDATA[
import dopsmoketoolutils
applyname = 'SOP_Source_VolumeSurface'
dopsmoketoolutils.selectedConvertToSourceSink(kwargs, applyname, objprompt="Select object to emit fluid from.", fluidprompt="Select a fluid object to emit into", autoconvert = False, createifempty="flipfluid")]]></script>
  </tool>

  <tool name="dynamics_particlefluidsink" label="沉淀粒子流体" icon="DOP_particlefluidsink">
    <helpURL>tool:sinkparticlefluid</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
doptoolutils.particlefluidAddEmitterOrSink(kwargs, "sink")]]></script>
  </tool>

  <tool name="dynamics_staticobject" label="静态对象" icon="DOP_staticobject">
    <helpURL>tool:staticobject</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Objects</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils
doptoolutils.convertToDeformingObject(kwargs, False)]]></script>
  </tool>

  <tool name="dop_deformingobject" label="变形对象" icon="SHELF_deforming_object">
    <helpURL>tool:deformingobject</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Objects</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils
doptoolutils.convertToDeformingObject(kwargs, True)]]></script>
  </tool>

  <tool name="dop_groundplane" label="地面平面" icon="DOP_groundplane">
    <helpURL>tool:groundplane</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Objects</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils

activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    frame = hou.frame()
    hou.setFrame(1)
    dopnet = doptoolutils.getCurrentDopNetwork()
    # Create the ground plane DOP node.
    groundplane = dopnet.createNode("groundplane")
    # Create an object level node that will represent the DOP object.
    objectnode = hou.node("/obj").createNode("geo", "groundplane_object1",
                                             run_init_scripts = False)
    toolutils.setUpOrientation(objectnode, "r", hou.orientUpAxis.Y)
    objectnode.moveToGoodPosition()
    # Point the ground plane DOP to the new object for its position.
    groundplane.parm("objpath").set(objectnode.path())
    # Create the static solver that we'll feed the ground plane through.
    solvernode = doptoolutils.createSolver("staticsolver", True)
    # Add the ground plane to the static solver.
    doptoolutils.addObjectToSolver(groundplane, solvernode, True)
    groundplane.moveToGoodPosition(False, False, False, False)

    objectmerge = objectnode.createNode('object_merge', 'import_groundplane')

    objectmerge.parm('objpath1').set(groundplane.path() + '/display')

    hou.setFrame(frame)
    # Make the new object node current, and enter its viewer state.
    objectnode.setCurrent(True, True)
    activepane.enterCurrentNodeState()
else:
    toolutils.genericTool(kwargs, "groundplane")]]></script>
  </tool>

  <tool name="dynamics_makebreakable" label="实现易碎" icon="SHELF_makebreakable">
    <helpURL>tool:makebreakable</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doprbdtoolutils
doprbdtoolutils.makeBreakable(kwargs)]]></script>
  </tool>

  <tool name="dynamics_gluenetwork" label="粘合相邻的" icon="PARTS_glue">
    <helpURL>tool:gluenetwork</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doprbdtoolutils
doprbdtoolutils.glueNetwork(kwargs)]]></script>
  </tool>

  <tool name="dynamics_autofreeze" label="RBD 自动冻结" icon="DOP_rbdautofreeze">
    <helpURL>tool:rbdautofreeze</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doprbdtoolutils
doprbdtoolutils.makeAutoFreeze(kwargs)]]></script>
  </tool>

  <tool name="dynamics_impactanalysis" label="RBD 影响" icon="DOP_affector">
    <helpURL>tool:impactanalysis</helpURL>
    <script scriptType="python"><![CDATA[

import doptoolutils
import doprbdtoolutils
doprbdtoolutils.makeImpactAnalysis(kwargs)]]></script>
  </tool>

  <tool name="dynamics_debris" label="碎片" icon="SHELF_debris">
    <helpURL>tool:debris</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() != hou.paneTabType.SceneViewer:
    raise hou.Error("This tool cannot run in the current pane")

scene_viewer = toolutils.sceneViewer()
nodetypename = "delete"

# Obtain a geometry selection
geo_types = (hou.geometryType.Primitives, )
selection = scene_viewer.selectGeometry(
                "Select the primitives from which to create debris and press Enter to complete",
                geometry_types = geo_types,
                allow_obj_sel = True)
# The following will raise an exception if nothing was selected.
if len(selection.nodes()) == 0:
    raise hou.Error("Nothing was selected.")

#
# Create Source
#
# Create a new SOP container with the merged geometry
container = soptoolutils.createSopNodeContainer(scene_viewer, "debris_source")
merge_sop = selection.mergedNode(container, nodetypename, True, True)
# Turn back on the display flag for merged nodes
for sop in selection.nodes():
    sop.parent().setDisplayFlag(True)

merge_sop.moveToGoodPosition()

unpack_sop = container.createNode('unpack')
unpack_sop.parm('limit_iterations').set(False)
unpack_sop.setFirstInput(merge_sop)
unpack_sop.moveToGoodPosition()

attribdelete_sop = container.createNode('attribdelete', 'remove_attributes')
attribdelete_sop.parm('ptdel').set('*')
attribdelete_sop.parm('vtxdel').set('*')
attribdelete_sop.parm('primdel').set('* ^name')
attribdelete_sop.parm('dtldel').set('*')
attribdelete_sop.setFirstInput(unpack_sop)
attribdelete_sop.moveToGoodPosition()

trail_sop = container.createNode('trail', 'compute_velocity')
trail_sop.parm('result').set('velocity')
trail_sop.setFirstInput(attribdelete_sop)
trail_sop.moveToGoodPosition()

debrissource_sop = container.createNode('debrissource')
debrissource_sop.setFirstInput(trail_sop)
debrissource_sop.moveToGoodPosition()

null_sop = container.createNode('null', 'OUT')
null_sop.setFirstInput(debrissource_sop)
null_sop.moveToGoodPosition()
null_sop.setDisplayFlag(True)
null_sop.setRenderFlag(True)

container.setDisplayFlag(False)

#
# Create Simulation
#
dopnet = container.parent().createNode('dopnet', 'debris_sim')
dopnet.moveToGoodPosition()

popobject = dopnet.createNode('popobject')
popobject.parm('friction').set(0.8)
popobject.parm('dynamicfriction').set(0.25)
popobject.moveToGoodPosition()

popsource = dopnet.createNode('popsource')
popsource.parm('emittype').set('point')
popsource.parm('soppath').set(null_sop.path())
popsource.parm('inheritattrib').set('* ^Cd')
popsource.parm('inheritvel').set(0.56)
popsource.moveToGoodPosition()

popstream = dopnet.createNode('popstream')
popstream.setFirstInput(popsource)
popstream.moveToGoodPosition()

popreplicate = dopnet.createNode('popreplicate')
popreplicate.parm('constantrate').set(100)
popreplicate.parm('killorig').set(True)
popreplicate.parm('shape').set('point')
popreplicate.parm('donoise').set(True)
popreplicate.parm('initvel').set('add')
popreplicate.parm('varx').set(0.7)
popreplicate.parm('vary').set(0.7)
popreplicate.parm('varz').set(0.7)
popreplicate.setFirstInput(popstream)
popreplicate.moveToGoodPosition()

popinteract = dopnet.createNode('popinteract')
popinteract.parm('positionforce').set(-0.2)
popinteract.parm('falloffradius').set(0.44)
popinteract.setFirstInput(popreplicate)
popinteract.moveToGoodPosition()

popdrag = dopnet.createNode('popdrag')
popdrag.parm('airresist').set(0.01)
popdrag.setFirstInput(popinteract)
popdrag.moveToGoodPosition()

popforce = dopnet.createNode('popforce')
popforce.parm('forcey').set(-9.80665)
popforce.setFirstInput(popdrag)
popforce.moveToGoodPosition()

popsolver = dopnet.createNode('popsolver')
popsolver.setFirstInput(popobject)
popsolver.setNextInput(popforce)
popsolver.setNextInput(popsource)
popsolver.moveToGoodPosition()

popsolver.setDisplayFlag(True)
dopnet.setDisplayFlag(False)

#
# Create Simulation
#
debris = container.parent().createNode('geo', 'debris', False)
debris.moveToGoodPosition()

dopimport = debris.createNode('dopimport')
dopimport.parm('doppath').set(dopnet.path())
dopimport.parm('importstyle').set('fetch')
dopimport.moveToGoodPosition()

# Change our viewer to the dop network
scene_viewer.setPwd(popsolver)
popsolver.setCurrent(True, True)
toolutils.homeToSelectionNetworkEditorsFor(popsolver)
scene_viewer.enterCurrentNodeState()]]></script>
  </tool>

  <tool name="dynamics_rbdpointobject" label="RBD 实例化对象" icon="DOP_rbdpointobject">
    <helpURL>tool:rbdpointobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils
import doprbdtoolutils

activepane = toolutils.activePane(kwargs)

# Make the user select some source objects to simulate.
selectedobjects = activepane.selectObjects(
    prompt = "Select object whose points will be used for instancing.  Press Enter to accept selection,",
    allow_multisel = True, allowed_types = ("geo",))

# Select the object(s) to instance.  For packed points, make sure each
# object has an instance attribute or make the user select an instance
# override object.
instancesops = {}
for objectnode in selectedobjects:
    instancesop = None
    # Check if the selected geometry has an instance point attribute.
    if objectnode.displayNode().geometry().findPointAttrib("instance") is None:
        # There is no instance attribute, so make the user pick an object.
        prompt = "Select object to instance at each point of %s. Press Enter to accept selection." % (objectnode.name(), )
        instanceselection = activepane.selectObjects(
            prompt = prompt, use_existing_selection = False,
            allow_multisel = False, allowed_types = ("geo",))
        if len(instanceselection) == 0:
            raise hou.OperationFailed("No instance geometry was chosen.")
        instancesop = instanceselection[0].displayNode()
    instancesops[objectnode] = instancesop

# Use /obj to ensure that no nodes are selected anywhere.
hou.node("/obj").setCurrent(False, True)
# Move to frame one so the simulation will be recalculated.
frame = hou.frame()
hou.setFrame(1)

# Set up the DOP objects.
for objectnode in selectedobjects:
    instancenode = instancesops[objectnode]

    pointsnode = objectnode.displayNode()

    mergenode = objectnode.createNode('object_merge', 'fetch_instance_geometry')
    mergenode.setCreatorState(hou.shelves.runningTool().name())
    mergenode.parm('objpath1').set(instancenode.path())

    doprbdtoolutils.createPackedRBDInstances(objectnode, pointsnode, mergenode, '`opname("..")`', [])

    instancenode.creator().setDisplayFlag(False)

    # Make the source object node the current node.
    objectnode.setCurrent(True, False)

# Enter the viewer state for the selected object nodes.
activepane.enterCurrentNodeState()
# Move back to the starting frame, with the new simulated objects.
hou.setFrame(frame)]]></script>
  </tool>

  <tool name="dynamics_rbdheroobject" label="RBD 主对象" icon="DOP_rbdobject">
    <helpURL>tool:rbdheroobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils
doptoolutils.genericTool(kwargs, 'rbdobject')]]></script>
  </tool>

  <tool name="dynamics_rbdobjects" label="RBD 对象" icon="DOP_rbdpackedobject">
    <helpURL>tool:rbdobjects</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils
doptoolutils.genericTool(kwargs, 'rbdpackedobject')]]></script>
  </tool>

  <tool name="dynamics_rbdfracturedobject" label="RBD 断开对象" icon="DOP_rbdfracturedobject">
    <helpURL>tool:rbdfracturedobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils

choice = -1
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    choice = hou.ui.displayMessage(
        text='What type of fractured object?',
        help='\n'.join([ 'Click RBD Packed Object unless you need the RBD objects to interact with other',
                         'solvers (fluids, cloth), or if you want to use constraints other than a constraint',
                         'network. Packed objects are much faster and use less memory for large geometry.',
                         'They can also be influenced by POP Forces, such as drag.' ]),
        buttons=('RBD Packed Object', 'RBD Fractured Object', 'Cancel'))
if choice == 0:
    doptoolutils.genericTool(kwargs, 'rbdpackedobject')
elif choice == 1:
    doptoolutils.genericTool(kwargs, 'rbdfracturedobject')]]></script>
  </tool>

  <tool name="dynamics_rbdglueobject" label="RBD 粘合对象" icon="DOP_rbdfracturedobject">
    <helpURL>tool:rbdglueobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils
import doprbdtoolutils

doprbdtoolutils.createGluedObject(kwargs, True)]]></script>
  </tool>

  <tool name="dynamics_rbdconvexproxy" label="RBD 凸面代理" icon="SHELF_rbdconvexproxy">
    <helpURL>tool:rbdconvexproxy</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doprbdtoolutils
doprbdtoolutils.createConvexProxy(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_rbdsphereproxy" label="RBD 范围代理" icon="SHELF_rbdsphereproxy">
    <helpURL>tool:rbdsphereproxy</helpURL>
    <script scriptType="python"><![CDATA[
import doptoolutils
import doprbdtoolutils
doprbdtoolutils.createSphereProxy(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_rbdragdollobject" label="RBD 布偶" icon="DOP_rbdragdollobject">
    <helpURL>tool:rbdragdollobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils
import doprbdtoolutils
doprbdtoolutils.createRagdollObject(kwargs)
]]></script>
  </tool>

  <tool name="dop_magnetforce" label="磁力" icon="DOP_magnetforce">
    <helpURL>operator:Dop/magnetforce</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/magnetforce</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Forces</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopgeofiltertoolutils

def magnetValidateGeometry(magnetobject):
    geometry = magnetobject.displayNode().geometry()
    for prim in geometry.prims():
        if prim.type() == hou.primType.Metaball:
            return
    msg = "Selected magnet geometry has no metaballs."
    raise hou.OperationFailed(msg)

dopgeofiltertoolutils.genericTool(kwargs, 'magnetforce', magnetValidateGeometry)
]]></script>
  </tool>

  <tool name="dop_fieldforce" label="域力" icon="DOP_fieldforce">
    <helpURL>operator:Dop/fieldforce</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/fieldforce</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Forces</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopgeofiltertoolutils

def fieldValidateGeometry(fieldobject):
    geometry = fieldobject.displayNode().geometry()
    for attrib in geometry.pointAttribs():
        if attrib.dataType() == hou.attribData.Float and \
           attrib.size() == 3 and \
           (attrib.name() == "force" or attrib.name() == "torque"):
            return
    msg = "Selected field geometry has no force or torque attributes."
    raise hou.OperationFailed(msg)

dopgeofiltertoolutils.genericTool(kwargs, 'fieldforce', fieldValidateGeometry)
]]></script>
  </tool>

  <tool name="dop_vortexforce" label="涡力" icon="DOP_vortexforce">
    <helpURL>operator:Dop/vortexforce</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/vortexforce</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Forces</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopgeofiltertoolutils

def vortexValidateGeometry(vortexobject):
    geometry = vortexobject.displayNode().geometry()
    # Vortex geometry must have at least on open curve, and must have point
    # attributes for the orbit radius and orbit velocity.
    hasopenface = False
    hasorbitrad = False
    hasorbitvel = False
    # First look for an open curve.
    for prim in geometry.prims():
        if isinstance(prim, hou.Face) and not prim.closed():
            hasopenface = True
            break
    if hasopenface:
        # Now look for the orbit radius and orbit velocity attributes.
        for attrib in geometry.pointAttribs():
            if attrib.dataType() == hou.attribData.Float and attrib.size() == 1:
                if attrib.name() == "orbitrad":
                    hasorbitrad = True
                elif attrib.name() == "orbitvel":
                    hasorbitvel = True
        # If no orbitrad or no orbitvel attributes were found, we should
        # create these attributes.
        if not hasorbitrad or not hasorbitvel:
            # Create the attributes with the vortexforceattribs SOP.
            olddisplay = vortexobject.displayNode()
            attribsop = vortexobject.createNode("vortexforceattribs")
            attribsop.setFirstInput(olddisplay)
            attribsop.setDisplayFlag(True)
            attribsop.setRenderFlag(olddisplay.isRenderFlagSet())
            attribsop.moveToGoodPosition()
    if not hasopenface:
        msg = "Selected vortex geometry has no open curves."
        raise hou.OperationFailed(msg)

dopgeofiltertoolutils.genericTool(kwargs, 'vortexforce', vortexValidateGeometry, force_prompt="Now select an open curve to be the center of the vortex.  Press Enter to complete.")
]]></script>
  </tool>

  <tool name="dynamics_solidobject" label="实心对象" icon="DOP_solidobject">
    <helpURL>tool:solidobject</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Objects</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopfetoolutils

dopfetoolutils.selectAndCreateSolidObjects(kwargs, 'solidobject', 'generic', 'solid object')
]]></script>
  </tool>

  <tool name="dynamics_hybridobject" label="混合对象" icon="DOP_hybridobject">
    <helpURL>operator:Dop/hybridobject</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Objects</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopfetoolutils

dopfetoolutils.selectAndCreateHybridObjects(kwargs, 'hybridobject', 'generic', 'hybrid object')
]]></script>
  </tool>

  <tool name="dynamics_organicmass" label="有机质量" icon="SHELF_squid">
    <helpURL>tool:organicmass</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Objects</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopfetoolutils

dopfetoolutils.selectAndCreateSolidObjects(kwargs, 'solidobject', 'organicmass', 'organic mass')
]]></script>
  </tool>

  <tool name="dynamics_organictissue" label="有机组织" icon="SHELF_organic_tissue">
    <helpURL>tool:organictissue</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Objects</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopfetoolutils

dopfetoolutils.selectAndCreateHybridObjects(kwargs, 'hybridobject', 'organictissue', 'organic tissue')
]]></script>
  </tool>

  <tool name="dynamics_embedhighresobject" label="嵌入高级别对象" icon="DOP_embedhighresobject">
    <helpURL>tool:embedhighresobject</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[

import dopclothproxy

dopclothproxy.selectAndEmbedHighresObject(kwargs, 'embedhighres')

]]></script>
  </tool>

 <tool name="dynamics_fracturedsolidobject" label="碎裂实心对象" icon="DOP_fracturedsolidobject">
    <helpURL>tool:fracturedsolidobject</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Objects</toolSubmenu>
    <script scriptType="python"><![CDATA[

import dopfetoolutils

dopfetoolutils.selectAndCreateSolidObjects(kwargs, 'solidobject', 'fractured', 'fractured object')

]]></script>
  </tool>

  <tool name="dynamics_clothobject" label="布料对象" icon="DOP_clothobject">
    <helpURL>tool:clothobject</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Objects</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopclothtoolutils

dopclothtoolutils.selectAndCreateClothObjects(kwargs, 'clothobject', 'generic', 'cloth object')
]]></script>
  </tool>

 <tool name="dynamics_clothproxy" label="布料代理" icon="SOP_clothcapture">
   <helpURL>tool:clothproxy</helpURL>
   <toolMenuContext name="viewer">
     <contextNetType>DOP</contextNetType>
   </toolMenuContext>
   <toolMenuContext name="network">
     <contextOpType>Dop/clothproxy</contextOpType>
   </toolMenuContext>
   <toolSubmenu>Objects</toolSubmenu>
   <script scriptType="python"><![CDATA[import dopclothproxy

dopclothproxy.selectAndCreateCustomizedClothObjectsWithProxy(kwargs)
]]></script>
  </tool>


  <tool name="dop_surfacecollider" label="表面碰撞" icon="DOP_clothbodycollider">
    <helpURL>tool:clothbodycollider</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Objects</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopfetoolutils

dopfetoolutils.selectAndCreateSurfaceCollider(kwargs, 'surfacecollider')
]]></script>
  </tool>

  <tool name="dop_solidcollider" label="表面碰撞" icon="DOP_clothbodycollider">
    <helpURL>tool:clothbodycollider</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Objects</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopfetoolutils

dopfetoolutils.selectAndCreateSolidCollider(kwargs, 'solidcollider')
]]></script>
  </tool>

  <tool name="dop_volumecollider" label="体积碰撞" icon="DOP_surfacecollisionparms">
    <helpURL>tool:rigidcollider</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Objects</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopfetoolutils

dopfetoolutils.selectAndCreateVolumeCollider(kwargs, 'volumecollider')
]]></script>
  </tool>

  <tool name="dynamics_attachconstraint" label="附加到主体" icon="DOP_clothattachtobody">
    <helpURL>tool:clothattachtobody</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopclothtoolutils
import dopsbdtoolutils

dopclothtoolutils.createClothAttachConstraint(kwargs,
                            dopsbdtoolutils.SBD_CONSTRAINT_TYPE_SOFT, 'cloth')
]]></script>
  </tool>

  <tool name="dynamics_clothfollowtarget" label="将点约束到目标" icon="SHELF_cloth_follow_animation">
    <helpURL>tool:clothfollowanimation</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python">
      <![CDATA[import dopfetoolutils
import dopsbdtoolutils

dopfetoolutils.createTargetConstraint(kwargs,
                            dopsbdtoolutils.SBD_CONSTRAINT_TYPE_HARD, 'cloth',
                            None)
]]>
    </script>
  </tool>

  <tool name="dynamics_solidfollowtarget" label="将点约束到目标" icon="SHELF_cloth_follow_animation">
    <helpURL>tool:feconstrainpointstotarget</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python">
      <![CDATA[import dopfetoolutils
import dopsbdtoolutils
dopfetoolutils.createTargetConstraint(kwargs,
                            dopsbdtoolutils.SBD_CONSTRAINT_TYPE_HARD, 'solid',
                            None)
]]>
    </script>
  </tool>

  <tool name="dynamics_constrainregion" label="约束区域" icon="SHELF_constrain_region">
    <helpURL>tool:feconstrainregion</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python">
      <![CDATA[import dopfetoolutils
import dopsbdtoolutils
dopfetoolutils.createRegionConstraint(kwargs,
                            dopsbdtoolutils.SBD_CONSTRAINT_TYPE_HARD, 'solid',
                            None)
]]>
    </script>
  </tool>

  <tool name="dynamics_visualizefiniteelements" label="可视化限定元素" icon="SHELF_visualize_fem">
    <helpURL>tool:fevisualize</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python">
      <![CDATA[import dopfetoolutils
import dopsbdtoolutils
dopfetoolutils.createVisualization(kwargs,
                            'solid',
                            None)
]]>
    </script>
  </tool>

  <tool name="dynamics_fusepointpairs" label="成对焊接点" icon="DOP_fefuseconstraint">
    <helpURL>tool:fefusepointpairs</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopfetoolutils
import dopsbdtoolutils
dopfetoolutils.createFEFuseConstraint(kwargs,
                            dopsbdtoolutils.SBD_CONSTRAINT_TYPE_HARD, 'solid')
]]></script>
  </tool>

  <tool name="dynamics_stitchconstraint" label="缝合布料" icon="DOP_clothstitchconstraint">
    <helpURL>tool:clothstitch</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopclothtoolutils
import dopsbdtoolutils
dopclothtoolutils.createClothStitchConstraint(kwargs,
                            dopsbdtoolutils.SBD_CONSTRAINT_TYPE_HARD, 'cloth')
]]></script>
  </tool>

  <tool name="dop_clothautopintoanimationattribute" label="创建自动别针到动画约束（实验）" icon="">
    <helpURL></helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopclothtoolutils

dopclothtoolutils.createAutoPinToAnimationAttribute(kwargs)
]]></script>
  </tool>

  <tool name="dop_rbdangularspringconstraint" label="RBD 角度弹簧约束" icon="DOP_rbdangularspringconstraint">
    <helpURL>tool:rbdangularspringconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/rbdangularspringconstraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopreltoolutils

dopreltoolutils.genericConstraintTool(kwargs, 'rbdangularspringconstraint',
                            validateobjfunc = dopreltoolutils.validateRBDorBullet,
                            mutual = True,
                            allowaffector = True)
]]></script>
  </tool>

  <tool name="dop_rbdangularconstraint" label="RBD 角度约束" icon="DOP_rbdangularconstraint">
    <helpURL>tool:rbdangularconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/rbdangularconstraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopreltoolutils

dopreltoolutils.genericConstraintTool(kwargs, 'rbdangularconstraint',
                            validateobjfunc = dopreltoolutils.validateRBDorBullet,
                            mutual = True,
                            allowaffector = True)
]]></script>
  </tool>

  <tool name="dop_rbdhingeconstraint" label="RBD 捆绑约束" icon="DOP_rbdhingeconstraint">
    <helpURL>tool:rbdhingeconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/rbdhingeconstraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopreltoolutils

dopreltoolutils.genericConstraintTool(kwargs, 'rbdhingeconstraint',
                            validateobjfunc = dopreltoolutils.validateRBDorBullet,
                            mutual = True,
                            allowaffector = True)
]]></script>
  </tool>

  <tool name="dop_rbdpinconstraint" label="RBD 别针约束" icon="DOP_rbdpinconstraint">
    <helpURL>tool:rbdpinconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/rbdpinconstraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopreltoolutils

dopreltoolutils.genericConstraintTool(kwargs, 'rbdpinconstraint',
                            validateobjfunc = dopreltoolutils.validateRBDorBullet,
                            mutual = True,
                            allowaffector = True)
]]></script>
  </tool>

  <tool name="dop_rbdconetwistconstraint" label="RBD 锥体扭曲约束" icon="DOP_rbdconetwistconstraint">
    <helpURL>tool:rbdconetwistconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/rbdconetwistconstraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopreltoolutils

dopreltoolutils.genericConstraintTool(kwargs, 'rbdconetwistconstraint',
                            validateobjfunc = dopreltoolutils.validateBullet,
                            mutual = True,
                            allowaffector = True)
]]></script>
  </tool>

  <tool name="dop_rbdsliderconstraint" label="RBD 滑动约束" icon="DOP_rbdsliderconstraint">
    <helpURL>tool:rbdsliderconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/rbdsliderconstraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopreltoolutils

dopreltoolutils.genericConstraintTool(kwargs, 'rbdsliderconstraint',
                            validateobjfunc = dopreltoolutils.validateBullet,
                            mutual = True,
                            allowaffector = True)
]]></script>
  </tool>

  <tool name="dop_rbdspringconstraint" label="RBD 弹簧约束" icon="DOP_rbdspringconstraint">
    <helpURL>tool:rbdspringconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/rbdspringconstraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopreltoolutils

dopreltoolutils.genericConstraintTool(kwargs, 'rbdspringconstraint',
                            validateobjfunc = dopreltoolutils.validateRBDorBullet,
                            mutual = True,
                            allowaffector = True)
]]></script>
  </tool>

  <tool name="dop_wiresetinitialpose" label="设置初始姿势" icon="SHELF_wire_initial_pose">
    <helpURL>tool:setinitialpose</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Position</toolSubmenu>
    <script scriptType="python"><![CDATA[import doptoolutils
import dopwiretoolutils

dopwiretoolutils.setInitialPose(kwargs)
]]></script>
  </tool>

  <tool name="dynamics_gluewiretoanimation" label="粘合导线到动画中" icon="SHELF_attach_constraint_animation">
    <helpURL>tool:gluewiretoanimation</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/gluewiretoanimation</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopwiretoolutils

dopwiretoolutils.glueWireToAnimation(kwargs, 'gluewiretoanimation')
]]></script>
  </tool>

  <tool name="dop_wirepinconstraint" label="导线别针约束" icon="SHELF_wirepinconstraint">
    <helpURL>tool:wirepinconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopsbdtoolutils

dopsbdtoolutils.genericConstraintTool(kwargs, 'sbdpinconstraint')
]]></script>
  </tool>

  <tool name="dop_wirespringconstraint" label="导线弹簧约束" icon="SHELF_wirespringconstraint">
    <helpURL>tool:wirespringconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopsbdtoolutils

dopsbdtoolutils.genericConstraintTool(kwargs, 'sbdspringconstraint')
]]></script>
  </tool>

  <tool name="dop_wireattachmentconstraint" label="附加导线到曲面" icon="SHELF_attach_wire_to_surface">
    <helpURL>tool:wireattachtosurface</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopsbdtoolutils

dopsbdtoolutils.createSBDAttachmentConstraints(kwargs,
                            dopsbdtoolutils.SBD_CONSTRAINT_TYPE_SOFT, 'wire',
                            dopsbdtoolutils.DYNAMIC_SELECTION_TYPE_POINT)
]]>
    </script>
  </tool>

  <tool name="dop_wireangularconstraint" label="导线角度约束" icon="DOP_wireangularconstraint">
    <helpURL>operator:Dop/wireangularconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/wireangularconstraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopsbdtoolutils

dopsbdtoolutils.genericConstraintTool(kwargs, 'wireangularconstraint')
]]></script>
  </tool>

  <tool name="dop_wireangularspringconstraint" label="导线角度弹簧约束" icon="DOP_wireangularspringconstraint">
    <helpURL>operator:Dop/wireangularspringconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/wireangularspringconstraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopsbdtoolutils

dopsbdtoolutils.genericConstraintTool(kwargs, 'wireangularspringconstraint')
]]></script>
  </tool>

  <tool name="dop_wireglueconstraint" label="导线粘合约束" icon="DOP_wireglueconstraint">
    <helpURL>operator:Dop/wireglueconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/wireglueconstraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopsbdtoolutils

dopsbdtoolutils.genericConstraintTool(kwargs, 'wireglueconstraint')
]]></script>
  </tool>

  <tool name="dop_constraint" label="约束" icon="DOP_constraint">
    <helpURL>operator:Dop/constraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/constraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopreltoolutils

dopreltoolutils.genericRelationshipTool(kwargs, 'constraint',
                            validateobjfunc = None,
                            mutual = False,
                            wantaffector = True,
                            needaffector = False,
                            multiaffected = False,
                            multiaffector = False)
]]></script>
  </tool>

  <tool name="dop_colliderel" label="碰撞关系" icon="DOP_colliderel">
    <helpURL>operator:Dop/colliderel</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/colliderel</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Relationships</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopreltoolutils

dopreltoolutils.genericRelationshipTool(kwargs, 'colliderel',
                            validateobjfunc = None,
                            mutual = True,
                            wantaffector = True,
                            needaffector = True,
                            multiaffected = True,
                            multiaffector = True)
]]></script>
  </tool>

  <tool name="dop_grouprel" label="组关系" icon="DOP_grouprel">
    <helpURL>operator:Dop/grouprel</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/grouprel</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Relationships</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopreltoolutils

dopreltoolutils.genericRelationshipTool(kwargs, 'grouprel',
                            validateobjfunc = None,
                            mutual = False,
                            wantaffector = False,
                            needaffector = False,
                            multiaffected = True,
                            multiaffector = False)
]]></script>
  </tool>

  <tool name="dop_sourcerel" label="源关系" icon="DOP_sourcerel">
    <helpURL>operator:Dop/sourcerel</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/sourcerel</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Relationships</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopreltoolutils

dopreltoolutils.genericRelationshipTool(kwargs, 'sourcerel',
                            validateobjfunc = dopreltoolutils.validateSource,
                            mutual = False,
                            wantaffector = True,
                            needaffector = True,
                            multiaffected = True,
                            multiaffector = True)
]]></script>
  </tool>

  <tool name="dop_group" label="组动态对象" icon="DOP_group">
    <helpURL>operator:Dop/group</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/group</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Relationships</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils

activepane = toolutils.activePane(kwargs)
if not isinstance(activepane, hou.SceneViewer):
    toolutils.genericTool(kwargs, "group")
else:
    dopobjects = activepane.selectDynamics(
        prompt = toolutils.selectionPrompt(hou.dopNodeTypeCategory()))
    if len(dopobjects) > 0:
        # Get the group string right away. As soon as we start
        # creating nodes or changing parm values, the dopobjects
        # will be invalidated as the DOPNET recooks.
        groupstring = doptoolutils.getGroupString(dopobjects, True)
        displaynode = dopobjects[0].dopNetNode().displayNode()
        groupnode = toolutils.findInputNodeOfType(displaynode,
                                                  "group", True)
        if groupnode is not None:
            # Get all the processed objects that are being grouped.
            processed = groupnode.processedObjects()
            processeddict = dict([(obj,0) for obj in processed])
            for obj in dopobjects:
                if obj not in processeddict:
                    groupnode = None
                    break
        if groupnode is None:
            groupnode = doptoolutils.genericDopFilterCreate(
                        dopobjects, "group", None, False)
            groupnode.parm("numgroups").set(0)
        numgroups = groupnode.evalParm("numgroups")
        groupnode.parm("numgroups").set(numgroups+1)
        suffix = str(numgroups)
        groupnode.parm("groupname"+suffix).set("group"+suffix)
        groupnode.parm("groupmask"+suffix).set(groupstring)
        groupnode.setCurrent(True, True)
        activepane.enterCurrentNodeState()
]]></script>
  </tool>

  <tool name="dop_parentconstraint" label="RBD 关系约束" icon="SHELF_parent_constraint">
    <helpURL>tool:parentconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils

theSupportedNodeTypes = ("rbdpinconstraint",
                         "rbdconetwistconstraint",
                         "rbdsliderconstraint",
                         "rbdspringconstraint",
                         "rbdhingeconstraint",
                         "rbdangularconstraint",
                         "rbdangularspringconstraint")

sceneviewer = toolutils.activePane(kwargs)
prompt = "Select constraint to change parent. Press Enter to accept selection."
seldata = sceneviewer.selectDynamics(prompt = prompt,
                                     allow_objects = False,
                                     allow_modifiers = True,
                                     allow_multisel = False)
if len(seldata) == 1:
    creator = doptoolutils.getDopDataCreator(seldata[0])
    if creator.type().name() in theSupportedNodeTypes:
        prompt = "Select new goal object. Press Enter to accept selection."
        selobjects = sceneviewer.selectDynamics(prompt = prompt,
                                                allow_objects = True,
                                                allow_modifiers = False,
                                                allow_multisel = False)
        if len(selobjects) == 1:
            selobjectname = selobjects[0].name()
        else:
            selobjectname = ""
        creator.parm("goalgroup").set(selobjectname)
        creator.parm("mirror").set(len(selobjectname) > 0)
        creator.setCurrent(True, True)
        sceneviewer.enterCurrentNodeState()
    else:
        raise hou.OperationFailed("An unsupported constraint type was selected.")
else:
    raise hou.OperationFailed("No constraint was selected.")]]></script>
  </tool>

  <tool name="dop_sbdattachconstraintrbd" label="附加约束到刚体" icon="SHELF_attach_constraint_rbd">
    <helpURL>tool:attachconstrainttorbd</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopsbdtoolutils

dopsbdtoolutils.attachConstraint(kwargs, 'rbd')]]></script>
  </tool>

  <tool name="dop_sbdattachconstraintpoint" label="附加约束到动态点" icon="SHELF_attach_constraint_dynamicspoint">
    <helpURL>tool:attachconstrainttodynamicspoint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopsbdtoolutils

dopsbdtoolutils.attachConstraint(kwargs, 'point')]]></script>
  </tool>

  <tool name="dop_sbdattachconstraintanimation" label="附加约束到动画" icon="SHELF_attach_constraint_animation">
    <helpURL>tool:attachconstrainttoanimation</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopsbdtoolutils

dopsbdtoolutils.attachConstraint(kwargs, 'animation')]]></script>
  </tool>

  <tool name="dop_sbddetachconstraint" label="分离约束" icon="SHELF_detach_constraint">
    <helpURL>tool:detachconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import dopsbdtoolutils

dopsbdtoolutils.attachConstraint(kwargs, 'worldspace')]]></script>
  </tool>

  <tool name="dop_sbddeleteconstraint" label="删除约束" icon="SHELF_detach_constraint">
    <helpURL>tool:deleteconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python">
      <![CDATA[import dopsbdtoolutils

dopsbdtoolutils.deleteConstraint(kwargs)]]>
    </script>
  </tool>

  <tool name="dop_fluidforce" label="流动力" icon="DOP_fluidforce">
    <helpURL>operator:Dop/fluidforce</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/fluidforce</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Forces</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils

theSupportedNodeTypes = ("fluidobject",
                         "particlefluidobject",
                         "smokeobject",
                         "sandobject")

activepane = toolutils.activePane(kwargs)
if not isinstance(activepane, hou.SceneViewer):
    toolutils.genericTool(kwargs, "fluidforce")
else:
    # Make the user select an object to specify the DOP Network.
    dopobjects = activepane.selectDynamics(
                        prompt = "Select affected objects for Fluid Force.  Press enter to accept selection.",
                        allow_multisel = True)

    if len(dopobjects) > 0:
        group = doptoolutils.getGroupString(dopobjects, False)

        fluidobjects = activepane.selectDynamics(
                            prompt = "Select fluid object for Fluid Force.  Press enter to accept selection.",
                            allow_multisel = False, use_existing_selection = False)

        # create a constraint for the selected fluid
        if len(fluidobjects) == 1 and doptoolutils.getDopDataCreator(fluidobjects[0]).type().name() in theSupportedNodeTypes:
            fluid = fluidobjects[0].name()

            container = fluidobjects[0].dopNetNode()
            inputdop = container.displayNode()
            newdopnode = container.createNode("fluidforce")

            newdopnode.parm("group").set(group)
            newdopnode.parm("fluid").set(fluid)

            newdopnode.setFirstInput(inputdop)
            newdopnode.setDisplayFlag(True)
            newdopnode.moveToGoodPosition()
            newdopnode.setCurrent(True, True)

            activepane.enterCurrentNodeState()]]></script>
  </tool>

  <tool name="dop_windforce" label="风力" icon="SHELF_wind_force">
    <helpURL>operator:Dop/windforce</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Dop/windforce</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Forces</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils

doptoolutils.genericTool(kwargs, 'windforce')]]></script>
  </tool>

  <tool name="dynamics_crowdsource" label="集群源" icon="POP_source">
    <helpURL>operator:Dop/popsource</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Dop/popsource</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Crowds</toolSubmenu>
    <script scriptType="python"><![CDATA[
import doptoolutils
popsource = doptoolutils.genericTool(kwargs, 'popsource::2.0', 'crowdsource')
popsource.parm("emittype").set("allgeo")
popsource.parm("showguide").set(False)
popsource.parm("impulseactiveate").setExpression("$SF == 1")
popsource.parm("jitterbirthtime").set("none")
]]></script>
  </tool>

  <tool name="object_crowdpopulate" label="填充" icon="CROWDS_populate">
    <helpURL>tool:crowds_populate</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.populateInteractive(kwargs)
]]></script>
  </tool>

<tool name="object_crowdsolver" label="模拟" icon="CROWDS_simulate">
    <helpURL>tool:crowds_simulate</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.simulateInteractive(kwargs)
]]></script>
  </tool>

<tool name="object_crowdterrain" label="地表行走" icon="CROWDS_agentterrainprojection">
    <helpURL>tool:crowds_terrain</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.addterrain(kwargs)
]]></script>
  </tool>

<tool name="object_crowdobstacle" label="障碍" icon="CROWDS_obstacle">
    <helpURL>tool:crowds_obstacle</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.addobstacle(kwargs)
]]></script>
  </tool>

<tool name="object_crowdagent" label="代理" icon="SHELF_bake_character">
    <helpURL>tool:crowds_agent</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.bakeAgentInteractive(kwargs)
]]></script>
  </tool>

<tool name="object_crowdaddclip" label="添加剪辑" icon="SOP_agentclip">
    <helpURL>tool:crowds_addclip</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.addClipInteractive(kwargs)
]]></script>
  </tool>

<tool name="object_crowdcollisionlayer" label="碰撞层" icon="SOP_agentcollisionlayer">
    <helpURL>tool:crowds_collisionlayer</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.addcollisionlayer(kwargs)
]]></script>
  </tool>

<tool name="object_crowdconfigurejoints" label="配置接头" icon="SOP_agentconfigurejoints">
    <helpURL>tool:crowds_configurejoints</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.configurejoints(kwargs)
]]></script>
  </tool>

<tool name="object_crowdpath" label="路径" icon="SHELF_agents_follow_path">
    <helpURL>tool:crowds_path</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.crowdpath(kwargs)
]]></script>
  </tool>

  <tool name="object_crowdlookat" label="查看" icon="CROWDS_agentlookat">
    <helpURL>tool:crowds_lookat</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.crowdlookat(kwargs)
]]></script>
  </tool>

  <tool name="object_crowdpaintdensity" label="绘制密度" icon="SOP_paint">
    <helpURL>tool:crowds_paintdensity</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.crowdpaintdensity(kwargs)
]]></script>
  </tool>



<tool name="object_stadiumcrowdsexample" label="体育场示例" icon="MISC_present">
    <helpURL>tool:stadiumcrowdsexample</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[
import objecttoolutils
n = objecttoolutils.genericTool(kwargs, 'stadiumcrowdsexample', clicktoplace=False)
n.allowEditingOfContents()
hou.node(n.path()+"/crowd").setCurrent(True,True)
]]></script>
  </tool>

<tool name="object_streetcrowdsexample" label="街道示例" icon="MISC_present">
    <helpURL>tool:streetcrowdsexample</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[
import objecttoolutils
n = objecttoolutils.genericTool(kwargs, 'streetcrowdsexample', clicktoplace=False)
n.allowEditingOfContents()
hou.node(n.path()+"/zombies").setCurrent(True,True)
]]></script>
  </tool>

<tool name="object_formationcrowdsexample" label="排序示例" icon="MISC_present">
    <helpURL>tool:formationcrowdsexample</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[
import objecttoolutils
n = objecttoolutils.genericTool(kwargs, 'formationcrowdsexample', clicktoplace=False)
n.allowEditingOfContents()
hou.node(n.path()+"/crowdsource").setCurrent(True,True)
]]></script>
  </tool>

<tool name="object_fuzzyobstaclescrowdsexample" label="模糊障碍示例" icon="MISC_present">
    <helpURL>tool:fuzzyobstaclescrowdsexample</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[
import objecttoolutils
n = objecttoolutils.genericTool(kwargs, 'fuzzyObstacleAvoidance', clicktoplace=False)
n.allowEditingOfContents()
hou.node(n.path()+"/crowdsource").setCurrent(True,True)
]]></script>
  </tool>

<tool name="object_fuzzytransitioncrowdsexample" label="模糊过渡示例" icon="MISC_present">
    <helpURL>tool:fuzzystatetransition</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[
import objecttoolutils
n = objecttoolutils.genericTool(kwargs, 'fuzzystatetransition', clicktoplace=False)
n.allowEditingOfContents()
hou.node(n.path()+"/crowdsource").setCurrent(True,True)
]]></script>
  </tool>

<tool name="object_ragdollrunexample" label="布偶行进示例" icon="MISC_present">
    <helpURL>tool:ragdollrunexample</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[
import objecttoolutils
n = objecttoolutils.genericTool(kwargs, 'ragdollrunexample', clicktoplace=False)
n.allowEditingOfContents()
hou.node(n.path()+"/crowdsource").setCurrent(True,True)
]]></script>
  </tool>


 <tool name="object_crowdtargetposition" label="目标位置" icon="CROWDS_popsteerseek">
    <helpURL>tool:crowds_target</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.crowdtargetposition(kwargs)
]]></script>
  </tool>

   <tool name="object_crowdagentcam" label="代理凸轮" icon="CROWDS_agentcam">
    <helpURL>tool:crowds_agentcam</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import crowdstoolutils
crowdstoolutils.crowdagentcam(kwargs)
]]></script>
  </tool>

<tool name="dynamics_emitlava" label="喷射熔岩" icon="SHELF_volcano">
    <helpURL>tool:emitlava</helpURL>
    <script scriptType="python"><![CDATA[import dopsmoketoolutils
applyname = 'SOP_Source_VolumeSurface'
dopsmoketoolutils.selectedConvertToSourceSink(kwargs, applyname, objprompt="Select object to emit lava from.", fluidprompt="Select fluid object to emit lava into", autoconvert = False, createifempty="flipfluid", subtype='emitlava')]]></script>
</tool>

<tool name="dynamics_meltobject" label="融化对象" icon="SHELF_melt">
    <helpURL>tool:meltobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils

dopnode = doptoolutils.genericDopConverterTool(
    toolutils.activePane(kwargs), 'flipfluidobject', 'flipfluidobject1',
    'Select object to melt.  Press Enter to complete.', subtype='melt')
]]></script>
</tool>

<tool name="dynamics_heatfromobject" label="加热对象内部" icon="SHELF_heat_within_object">
    <helpURL>tool:heatwithinobject</helpURL>
    <script scriptType="python"><![CDATA[import dopsmoketoolutils
applyname = 'SOP_Source'
dopsmoketoolutils.selectedConvertToAttribSource(kwargs, applyname, 'heatingvolume1', 'temperature', 'float',
    mergemethod='target', increaserate=3.0, decreaserate=0.0,
    objprompt="Select object to heat with.",
    fluidprompt="Select fluid object to heat", autoconvert=True)]]></script>
</tool>

<tool name="dynamics_coolfromobject" label="冷却对象内部" icon="SHELF_cool_within_object">
    <helpURL>tool:coolwithinobject</helpURL>
    <script scriptType="python"><![CDATA[import dopsmoketoolutils
applyname = 'SOP_Source'
dopsmoketoolutils.selectedConvertToAttribSource(kwargs, applyname, 'coolingvolume1', 'temperature', 'float',
    mergemethod='target', rangeout=(3.0, 0.0), increaserate=0.0, decreaserate=3.0,
    objprompt="Select object to cool with.",
    fluidprompt="Select fluid object to cool", autoconvert=True)]]></script>
</tool>

<tool name="dynamics_objecttolava" label="来自物体的熔岩" icon="SHELF_convert_to_lava">
    <helpURL>tool:lavafromobject</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils

dopnode = doptoolutils.genericDopConverterTool(
    toolutils.activePane(kwargs), 'flipfluidobject', 'flipfluidobject1',
    'Select object to turn into lava.  Press Enter to accept selection.', subtype='lava')
]]></script>
</tool>

<tool name="dynamics_emitsteamoncollision" label="碰撞后喷射蒸汽" icon="SHELF_emit_steam">
    <helpURL>tool:emitsteamoncollision</helpURL>
    <script scriptType="python"><![CDATA[import dopparticlefluidtoolutils

dopparticlefluidtoolutils.createSteam(kwargs)]]></script>
</tool>


</shelfDocument>
