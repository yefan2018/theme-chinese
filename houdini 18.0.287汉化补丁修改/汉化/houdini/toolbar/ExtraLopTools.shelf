<?xml version="1.0" encoding="ISO-8859-1"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="lop_xform" label="变换" icon="LOP_xform">
    <helpURL>operator:Lop/xform</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/xform</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Transform</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
import loputils

node = loptoolutils.genericTool(kwargs, 'xform')
prims = loputils.getAffectedPrims(node)
if prims:
    loputils.setPivotParmsToPrimTransform(
	    node, prims)]]></script>
  </tool>

  <tool name="lop_sceneimportall" label="场景导入（全部）"
	icon="LOP_sceneimport">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'sceneimport', nodename='sceneimportall1')
node.parm('objects').set('*')
node.parm('materials').set('*')
]]></script>
  </tool>

  <tool name="lop_sceneimportlights" label="场景导入（灯光）"
	icon="LOP_sceneimport">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'sceneimport', nodename='sceneimportlights1')
node.parm('objects').set('*')
node.parm('filter').set('!!OBJ/LIGHT!!')
]]></script>
  </tool>

  <tool name="lop_sceneimportcams" label="场景导入（相机）"
	icon="LOP_sceneimport">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'sceneimport', nodename='sceneimportcameras1')
node.parm('objects').set('*')
node.parm('filter').set('!!OBJ/CAMERA!!')
]]></script>
  </tool>

  <tool name="lop_sceneimportmats" label="场景导入（材质）"
	icon="LOP_sceneimport">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'sceneimport', nodename='sceneimportmaterials1')
node.parm('materials').set('*')
]]></script>
  </tool>

  <tool name="lop_prune" label="修剪"
	icon="LOP_prune">
    <helpURL>operator:Lop/prune</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/prune</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'prune', 'prune', selection_parm_name = 'primpattern1', selection_allow_pattern = True)
]]></script>
  </tool>

  <tool name="lop_payload" label="有效负荷"
	icon="LOP_reference">
    <helpURL>operator:Lop/reference</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/reference</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'reference', nodename='payload1')
node.parm('reftype').set('payload')
]]></script>
  </tool>

  <tool name="lop_file" label="文件"
	icon="LOP_sublayer">
    <helpURL>operator:Lop/sublayer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/sublayer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'sublayer', nodename='file1')
]]></script>
  </tool>

  <tool name="lop_overlay" label="覆盖"
	icon="LOP_merge">
    <helpURL>operator:Lop/merge</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/merge</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Combine</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
node = loptoolutils.genericTool(kwargs, 'merge', nodename='overlay1')
]]></script>
  </tool>

  <tool name="lop_addpointinstancer" label="点实例" icon="LOP_instancer">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Instancing</toolSubmenu>
    <script scriptType="python"><![CDATA[
import loptoolutils

loptoolutils.createPointInstancer(
    kwargs, 'addpointinstancer', 'pointinstancer')
]]></script>
  </tool>

  <tool name="lop_instancetopoints" label="实例到点" icon="LOP_instancer">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Instancing</toolSubmenu>
    <script scriptType="python"><![CDATA[
import loptoolutils

loptoolutils.createPointInstancer(
    kwargs, 'instancetopoints', 'pointinstancer', sourcemode='second')
]]></script>
  </tool>

  <tool name="lop_copytopoints" label="复制到点" icon="LOP_instancer">
    <helpURL>operator:Lop/instancer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/instancer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Instancing</toolSubmenu>
    <script scriptType="python"><![CDATA[
import loptoolutils

loptoolutils.createPointInstancer(
    kwargs, 'copytopoints', 'instanceablerefprims', sourcemode='second')
]]></script>
  </tool>

  <tool name="lop_optionblock" label="上下文选项限制" icon="LOP_editcontextoptions">
    <helpURL>operator:Lop/editcontextoptions</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/editcontextoptions</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Context Options</toolSubmenu>
    <script scriptType="python"><![CDATA[
import loptoolutils

(begin, end) = loptoolutils.buildBlockPair(kwargs, 'optionblock', 'begincontextoptionsblock', 'editcontextoptions', 0, False)
end.parm('createoptionsblock').set(True)
]]></script>
  </tool>

  <tool name="lop_addvariant" label="添加变形到新建基本体" icon="LOP_addvariant">
    <helpURL>operator:Lop/addvariant</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/addvariant</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Variants</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils

loptoolutils.genericTool(kwargs, 'addvariant')]]></script>
  </tool>

  <tool name="lop_addvariantblock" label="添加变形到现有基本体" icon="LOP_addvariant">
    <helpURL>operator:Lop/addvariant</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/addvariant</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Variants</toolSubmenu>
    <script scriptType="python"><![CDATA[
import loptoolutils

(begin, end) = loptoolutils.buildBlockPair(kwargs, 'variantblock', 'begincontextoptionsblock', 'addvariant', 1, True)
begin.parm('layerbreak').set(1)
end.parm('createoptionsblock').set(True)
end.parm('variantprimpath').set('`chs("primpath")`')
]]></script>
  </tool>

  <tool name="lop_setvariant" label="集成到变形体" icon="LOP_setvariant">
    <helpURL>operator:Lop/setvariant</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/setvariant</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Variants</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils

node = loptoolutils.genericTool(kwargs, 'setvariant')
inputs = node.inputs()
if len(inputs) > 0:
    input = inputs[0]
    ls = hou.LopSelectionRule()
    ls.setPathPattern(node.evalParm('primpattern1'))
    primpaths = ls.expandedPaths(node)
    if len(primpaths) > 0:
	prim = input.stage().GetPrimAtPath(primpaths[0])
	if prim:
	    varsets = prim.GetVariantSets()
	    if varsets:
		varsetnames = varsets.GetNames()
		if len(varsetnames) > 0:
		    varsetname = varsetnames[0]
		    node.parm('variantset1').set(varsetname)
]]></script>
  </tool>

  <tool name="lop_alignconstraint" label="对齐约束" icon="LOP_parentconstraint">
    <helpURL>operator:Lop/parentconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/parentconstraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils

if kwargs.get("viewport"):
    loptoolutils.constraintalignStateTool(kwargs)
else:
    loptoolutils.constraintalignStateToolApply(kwargs, [], [])
]]>
    </script>
  </tool>

  <tool name="lop_pinconstraint" label="别针约束" icon="LOP_parentconstraint">
  <helpURL>operator:Lop/parentconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/parentconstraint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils

if kwargs.get("viewport"):
    loptoolutils.constraintpinStateTool(kwargs)
else:
    loptoolutils.constraintpinStateToolApply(kwargs, [], [])
]]>
    </script>
  </tool>

  <tool name="lop_foreach" label="用于每个" icon="LOP_foreach">
    <helpURL>operator:Lop/foreach</helpURL>
    <toolMenuContext name="viewer">
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/foreach</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[
import loptoolutils

(begin, end) = loptoolutils.buildBlockPair(kwargs, 'foreach', 'begincontextoptionsblock', 'foreach', 2, True)
begin.parm('layerbreak').set(1)
]]></script>
  </tool>

  <tool name="lop_extractinstances" label="提取实例" icon="LOP_extractinstances">
    <helpURL>operator:Lop/extractinstances</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Lop/extractinstances</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Instancing</toolSubmenu>
    <script scriptType="python"><![CDATA[
import loptoolutils
node = loptoolutils.genericTool(kwargs, 'extractinstances', selection_parm_name='instances')
if kwargs.get('viewport'):
    try:
        selection = node.evalParm('instances')
        if selection and not '[' in selection:
            # No point instances selected - switch to native
            node.parm('instancertype').set(1)
            node.parm('nativeinstances').set(selection)
            node.parm('instances').set('')
    except:
        pass
]]></script>
  </tool>

</shelfDocument>
